{
  "name": "Proxmox MCP AI Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "/webhook/proxmox-event",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "84a08b1e-dc71-4e97-8b5d-d4c8b2a1c7e6",
      "name": "Webhook - Receive Event",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "proxmox-mcp-events"
    },
    {
      "parameters": {
        "url": "http://localhost:8000/events/recent",
        "options": {
          "timeout": 10000
        }
      },
      "id": "b2c3d4e5-f6a7-4b8c-9d0e-1f2a3b4c5d6e",
      "name": "Get Recent Events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [400, 200]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "messages": {
          "messageType": "multipleMessages",
          "messages": [
            {
              "role": "system",
              "message": "You are a Proxmox infrastructure AI agent. Analyze Proxmox events and determine appropriate automated responses.\n\nYour capabilities:\n1. Monitor VM states and performance\n2. Respond to backup events\n3. Handle storage warnings\n4. React to node failures\n5. Send notifications for critical events\n\nFor each event, decide:\n- Severity level (info/warning/critical)\n- Required actions (none/restart/backup/notify)\n- Notification channels needed\n- Follow-up monitoring required\n\nRespond in JSON format with:\n{\n  \"analysis\": \"Event analysis\",\n  \"severity\": \"info|warning|critical\",\n  \"recommended_action\": \"action to take\",\n  \"notification_required\": true/false,\n  \"channels\": [\"discord\", \"gotify\"],\n  \"follow_up\": \"any follow-up needed\"\n}"
            },
            {
              "role": "user",
              "message": "Analyze this Proxmox event:\n\nEvent: {{ $json.title }}\nMessage: {{ $json.message }}\nNode: {{ $json.node || 'unknown' }}\nVM ID: {{ $json.vm_id || 'N/A' }}\nSeverity: {{ $json.severity || 'info' }}\nType: {{ $json.event_type || 'general' }}\nTimestamp: {{ $json.timestamp }}\n\nRecent context (last 10 events):\n{{ $('Get Recent Events').all() }}\n\nProvide your analysis and recommended actions."
            }
          ]
        },
        "options": {
          "temperature": 0.3
        }
      },
      "id": "c3d4e5f6-a7b8-4c9d-0e1f-2a3b4c5d6e7f",
      "name": "AI Agent Analysis",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ JSON.parse($json.message).notification_required }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d4e5f6a7-b8c9-4d0e-1f2a-3b4c5d6e7f8a",
      "name": "Check if Notification Needed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/notifications/send",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $('Webhook - Receive Event').item.json.title }}"
            },
            {
              "name": "message",
              "value": "ðŸ¤– AI Analysis: {{ JSON.parse($('AI Agent Analysis').item.json.message).analysis }}\n\nðŸ“Š Original Event: {{ $('Webhook - Receive Event').item.json.message }}\n\nâš¡ Recommended Action: {{ JSON.parse($('AI Agent Analysis').item.json.message).recommended_action }}"
            },
            {
              "name": "channels",
              "value": "={{ JSON.parse($('AI Agent Analysis').item.json.message).channels }}"
            },
            {
              "name": "priority",
              "value": "={{ JSON.parse($('AI Agent Analysis').item.json.message).severity }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e5f6a7b8-c9d0-4e1f-2a3b-4c5d6e7f8a9b",
      "name": "Send AI Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition2",
              "leftValue": "={{ JSON.parse($('AI Agent Analysis').item.json.message).severity }}",
              "rightValue": "critical",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f6a7b8c9-d0e1-4f2a-3b4c-5d6e7f8a9b0c",
      "name": "Check if Critical Event",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/proxmox/action",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "={{ JSON.parse($('AI Agent Analysis').item.json.message).recommended_action }}"
            },
            {
              "name": "target",
              "value": "={{ $('Webhook - Receive Event').item.json.vm_id || $('Webhook - Receive Event').item.json.node || 'unknown' }}"
            },
            {
              "name": "parameters",
              "value": "{\"automated\": true, \"triggered_by\": \"ai_agent\", \"severity\": \"{{ JSON.parse($('AI Agent Analysis').item.json.message).severity }}\"}"
            }
          ]
        },
        "options": {}
      },
      "id": "a7b8c9d0-e1f2-4a3b-4c5d-6e7f8a9b0c1d",
      "name": "Execute Emergency Action",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1200, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "status": "processed",
          "ai_analysis": "={{ JSON.parse($('AI Agent Analysis').item.json.message).analysis }}",
          "actions_taken": "={{ $runIndex === 0 ? 'notification_sent' : 'notification_sent, emergency_action_executed' }}",
          "timestamp": "={{ new Date().toISOString() }}"
        }
      },
      "id": "b8c9d0e1-f2a3-4b4c-5d6e-7f8a9b0c1d2e",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "c9d0e1f2-a3b4-4c5d-6e7f-8a9b0c1d2e3f",
      "name": "Health Check Timer",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 600]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/status",
        "options": {
          "timeout": 5000
        }
      },
      "id": "d0e1f2a3-b4c5-4d6e-7f8a-9b0c1d2e3f4a",
      "name": "Check MCP Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [400, 600]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition3",
              "leftValue": "={{ $json.status }}",
              "rightValue": "running",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e1f2a3b4-c5d6-4e7f-8a9b-0c1d2e3f4a5b",
      "name": "Check if MCP Down",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 600]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/simulate/event",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "event_type",
              "value": "node_error"
            }
          ]
        },
        "options": {}
      },
      "id": "f2a3b4c5-d6e7-4f8a-9b0c-1d2e3f4a5b6c",
      "name": "Alert MCP System Down",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [800, 700]
    }
  ],
  "connections": {
    "Webhook - Receive Event": {
      "main": [
        [
          {
            "node": "Get Recent Events",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Analysis": {
      "main": [
        [
          {
            "node": "Check if Notification Needed",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check if Critical Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Notification Needed": {
      "main": [
        [
          {
            "node": "Send AI Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send AI Notification": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Critical Event": {
      "main": [
        [
          {
            "node": "Execute Emergency Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Emergency Action": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Health Check Timer": {
      "main": [
        [
          {
            "node": "Check MCP Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check MCP Status": {
      "main": [
        [
          {
            "node": "Check if MCP Down",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if MCP Down": {
      "main": [
        [
          {
            "node": "Alert MCP System Down",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-10-13T12:00:00.000Z",
  "versionId": "1.0.0"
}