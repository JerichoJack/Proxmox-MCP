{
  "name": "Proxmox MCP AI Agent (Simple)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "proxmox-event",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook1",
      "name": "Webhook - Receive Event",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "proxmox-mcp-events"
    },
    {
      "parameters": {
        "url": "http://localhost:8000/events/recent",
        "options": {
          "timeout": 10000
        }
      },
      "id": "http1",
      "name": "Get Recent Events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [400, 200]
    },
    {
      "parameters": {
        "jsCode": "// Simple rule-based analysis instead of AI\nconst event = $input.first().json;\nconst recentEvents = $('Get Recent Events').all();\n\n// Analyze the event\nlet analysis = {\n  analysis: `Proxmox event detected: ${event.title || 'Unknown event'}`,\n  severity: event.severity || 'info',\n  notification_required: false,\n  channels: ['discord'],\n  recommended_action: 'none',\n  follow_up: 'Monitor for additional events'\n};\n\n// Simple rule-based decisions\nif (event.title && (event.title.includes('error') || event.title.includes('fail'))) {\n  analysis.severity = 'critical';\n  analysis.notification_required = true;\n  analysis.recommended_action = 'investigate';\n} else if (event.title && (event.title.includes('warning') || event.title.includes('warn'))) {\n  analysis.severity = 'warning';\n  analysis.notification_required = true;\n  analysis.recommended_action = 'monitor';\n} else if (event.title && event.title.includes('backup')) {\n  analysis.notification_required = true;\n  analysis.recommended_action = 'verify_backup';\n}\n\n// Check for patterns in recent events\nconst errorCount = recentEvents.filter(e => \n  e.json && e.json.title && \n  (e.json.title.includes('error') || e.json.title.includes('fail'))\n).length;\n\nif (errorCount > 2) {\n  analysis.severity = 'critical';\n  analysis.notification_required = true;\n  analysis.recommended_action = 'emergency_check';\n  analysis.analysis += ` - Multiple errors detected (${errorCount} in recent events)`;\n}\n\nreturn [{ json: analysis }];"
      },
      "id": "code1",
      "name": "Rule-Based Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.notification_required }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if1",
      "name": "Check if Notification Needed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/notifications/send",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"title\": \"{{ $('Webhook - Receive Event').item.json.title || 'Proxmox Event' }}\",\n  \"message\": \"ðŸ¤– Analysis: {{ $('Rule-Based Analysis').item.json.analysis }}\\n\\nðŸ“Š Original Event: {{ $('Webhook - Receive Event').item.json.message || 'No message' }}\\n\\nâš¡ Recommended Action: {{ $('Rule-Based Analysis').item.json.recommended_action }}\",\n  \"channels\": {{ JSON.stringify($('Rule-Based Analysis').item.json.channels) }},\n  \"priority\": \"{{ $('Rule-Based Analysis').item.json.severity }}\"\n}",
        "options": {}
      },
      "id": "http2",
      "name": "Send Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition2",
              "leftValue": "={{ $('Rule-Based Analysis').item.json.severity }}",
              "rightValue": "critical",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if2",
      "name": "Check if Critical Event",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/proxmox/action",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"action\": \"{{ $('Rule-Based Analysis').item.json.recommended_action }}\",\n  \"target\": \"{{ $('Webhook - Receive Event').item.json.vm_id || $('Webhook - Receive Event').item.json.node || 'unknown' }}\",\n  \"parameters\": {\n    \"automated\": true,\n    \"triggered_by\": \"rule_based_agent\",\n    \"severity\": \"{{ $('Rule-Based Analysis').item.json.severity }}\"\n  }\n}",
        "options": {}
      },
      "id": "http3",
      "name": "Execute Emergency Action",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1200, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"processed\",\n  \"analysis\": \"{{ $('Rule-Based Analysis').item.json.analysis }}\",\n  \"actions_taken\": \"{{ $runIndex === 0 ? 'notification_sent' : 'notification_sent, emergency_action_executed' }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "response1",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "cron1",
      "name": "Health Check Timer",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 600]
    },
    {
      "parameters": {
        "url": "http://localhost:8000/status",
        "options": {
          "timeout": 5000
        }
      },
      "id": "http4",
      "name": "Check MCP Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [400, 600]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition3",
              "leftValue": "={{ $json.status }}",
              "rightValue": "running",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if3",
      "name": "Check if MCP Down",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/simulate/event",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "event_type",
              "value": "node_error"
            }
          ]
        },
        "options": {}
      },
      "id": "http5",
      "name": "Alert MCP System Down",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [800, 700]
    }
  ],
  "connections": {
    "Webhook - Receive Event": {
      "main": [
        [
          {
            "node": "Get Recent Events",
            "type": "main",
            "index": 0
          },
          {
            "node": "Rule-Based Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rule-Based Analysis": {
      "main": [
        [
          {
            "node": "Check if Notification Needed",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check if Critical Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Notification Needed": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Critical Event": {
      "main": [
        [
          {
            "node": "Execute Emergency Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Emergency Action": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Health Check Timer": {
      "main": [
        [
          {
            "node": "Check MCP Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check MCP Status": {
      "main": [
        [
          {
            "node": "Check if MCP Down",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if MCP Down": {
      "main": [
        [
          {
            "node": "Alert MCP System Down",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    "proxmox", 
    "mcp",
    "monitoring",
    "automation"
  ],
  "triggerCount": 2,
  "updatedAt": "2024-10-13T12:00:00.000Z",
  "versionId": "1.0.0",
  "meta": {
    "instanceId": "n8n-proxmox-mcp-agent-simple"
  },
  "active": false,
  "id": 2
}